Pi's father, Danny, runs the Hackerville Zoo. He is moving to Rookieville and wants to take all of the zoo animals with him via ship. He is confused about how to arrange them because a few of the species cannot be kept together in the same cabin.

There are n animals placed in a straight line. Each animal is identified by a unique number from 1 to n in order. There are m pairs (a[i], b[i]) which imply that animals a[i] and b[i] are enemies and should not be kept in the same cabin. Pi is good at solving problems and he came up with following challenge: count the number of different groups that do not contain any pair such that they are enemies. A group is defined as an interval (x, y) such that all animals in the range from x to y form a group. Determine the number of groups that can be formed according to the Pi's challenge.

For example, given n = 3 animals and m = 3 pairs of enemies, a = [1, 2, 3] and b = [3, 3, 1], animal 1 is the enemy of animal 3, and animal 3 is the enemy of animals 1 and 2. Because 3 is an enemy of both 1 and 2, it must be in its own cabin. Animals 1 and 2 can be roomed together or separately. There are four possible groupings meeting the constraints: {1, 2} , {1}, {2}, {3}. Note that the intervals are along the original line of animals numbered consecutively from 1 to n, i.e. [1, 2, 3] in this case. The animals cannot be reordered and animals cannot be skipped, e.g. {2, 1} and {1, 3} are invalid intervals.

Function Description

Complete the function angryAnimals in the editor below. The function must return the number of groups that can be formed according to Pi's challenge.

angryAnimals has the following parameters:

n: an integer that denotes the number of unique animals

a[a[0],...a[m-1]]: an array of integers

b[b[0],...b[m-1]]: an array of integers

Constraints

1 ≤ n ≤ 105

1 ≤ m ≤ 106

1 ≤ a[i], b[i] ≤ n

The solution to above problem is we have to maintain the list of enemies and only traverse the array once. We can store the enemies in priority queue and use a queue to add numbers one by one from 1 to n and keep on checking whether the current number is enemy of any number smaller than itself which is inside the queue and pop upto that element and keep on increasing the count by number of elements present in array as the number of groups that can be formed from x number of elements starting from first and going only in right direction are x.

For Example n =4 (1,2,3,4)

and (1,4) and (2,4) are enemies

we push 1 in the queue and increase count by 1

then we push 2 and then 3 while increment the count

When we reach at 4 we found that 4 is enemy of 1 so we pop 1 from the queue and increase the count by size of remaining queue(2,3) which is 2.

Now 4 is also enemy of 2 so we will also pop 2 and increase the count by size of queue (3) which is 1.

Now we push 4 and increment count.

at the end of queue we will have to find number of ways groups can be formed from remaining y number of elements which will be:

(y-1) +(y-2)+….+1 which can be simplified to (y-1)*y/2 as sum of n first natural numbers is n*(n+1)/2.

The a[i] and b[i] are enemies for each i from 0 to m-1 where m is length of a or b.

The solution in cpp is as follow:

long angryAnimals(int n,vector<int> a, vector<int> b)
{
	vector<priority_queue<int> > e(n+1);
	for(int i=0;i<a.size();i++)
	{
		// We will only push smaller element as we will be checking from left to right
		if(a[i]<=n && b[i]<=n)
			if(a[i]<b[i])
			{
				e[b[i]].push(a[i]);
			}
			else
			{
				e[a[i]].push(b[i]);
			}
	}

	long count = 0;
	queue<int> q;

	for(int i=1;i<=n;i++)
	{

		if(e[i].empty())
		{
			count++;
			q.push(i);
		}
		else
		{
			while(!q.empty()&& !e[i].empty() && q.front()<=e[i].top() && q.back() >=e[i].top())
			{
				if(q.front() >= e[i].top())
				{
					e[i].pop();
				}
				q.pop();
				count+=q.size();
			}
			q.push(i);
			count++;
		}
	}
	int size = q.size();
	//number of ways for remaining elements
	count+= size*(size-1)/2;
	return count;

}